{"version":3,"sources":["assets/zondicons/trophy.svg","apolloMockServer/index.ts","nav/Nav.tsx","assets/zondicons/bug.svg","gameboard/components/GameOverPopup.tsx","gameboard/components/PlayerInfo.tsx","gameboard/components/GameboardCell.tsx","gameboard/Gameboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","SCORES","gql","GAMEBOARD","GAME_STATUS","TURN","setScores","client","incoming","cache","writeQuery","query","data","x","o","localStorage","setItem","setGameboard","JSON","stringify","setGameStatus","status","PlayerScore","label","score","className","Array","Number","map","e","width","height","Nav","scores","useQuery","GameOverPopup","message","resetGame","onClick","stopPropagation","gravity","tweenDuration","recycle","PlayerInfo","turn","getBorderStyles","j","outputClasses","GameboardCell","value","useApolloClient","useLazyQuery","getGameboard","gameboard","getTurn","useEffect","isMounted","handleCellClick","updatedGameboard","updatedRow","setTurn","onKeyDown","role","tabIndex","getGameStatus","isBoardFull","rowPoints","valueToPointMap","get","xWinStatus","oWinStatus","diagTlBrPoints","diagTrBlPoints","drawStatus","inProgressStatus","Map","winner","Gameboard","gameStatus","row","toString","App","Boolean","window","location","hostname","match","ApolloClient","uri","InMemoryCache","getItem","parse","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c5624734.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15 9a3 3 0 0 0 3-3h2a5 5 0 0 1-5.1 5 5 5 0 0 1-3.9 3.9V17l5 2v1H4v-1l5-2v-2.1A5 5 0 0 1 5.1 11H5a5 5 0 0 1-5-5h2a3 3 0 0 0 3 3V4H2v2H0V2h5V0h10v2h5v4h-2V4h-3v5z\"\n});\n\nvar SvgTrophy = function SvgTrophy(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTrophy, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/trophy.65ab40d9.svg\";\nexport { ForwardRef as ReactComponent };","import { gql } from '@apollo/client';\n\nexport const SCORES = gql`\n  query getScores {\n    x @client\n    o @client\n  }\n`;\n\nexport const GAMEBOARD = gql`\n  query getGameboard {\n    data @client\n  }\n`;\n\nexport const GAME_STATUS = gql`\n  query getGameStatus {\n    status @client\n  }\n`;\n\nexport const TURN = gql`\n  query getTurn {\n    turn @client\n  }\n`;\n\nexport const initializeState = (cache: any) => {\n  cache.writeQuery({\n    query: SCORES,\n    data: {\n      x: Number(localStorage.getItem('xScore')) || 0,\n      o: Number(localStorage.getItem('oScore')) || 0,\n    },\n  });\n\n  cache.writeQuery({\n    query: GAMEBOARD,\n    data: {\n      data: localStorage.getItem('gameboard')\n        ? JSON.parse(localStorage.getItem('gameboard') || '[]')\n        : [\n            ['', '', ''],\n            ['', '', ''],\n            ['', '', ''],\n          ],\n    },\n  });\n\n  cache.writeQuery({\n    query: GAME_STATUS,\n    data: {\n      status: localStorage.getItem('status')\n        ? JSON.parse(localStorage.getItem('status') || '{}')\n        : {\n            status: 'IN_PROGRESS',\n            winner: '',\n          },\n    },\n  });\n\n  cache.writeQuery({\n    query: TURN,\n    data: {\n      turn: localStorage.getItem('turn') || 'X',\n    },\n  });\n};\n\nexport const setScores = (client: any, incoming: any) => {\n  client.cache.writeQuery({\n    query: SCORES,\n    data: {\n      x: incoming.x,\n      o: incoming.o,\n    },\n  });\n  localStorage.setItem('xScore', incoming.x);\n  localStorage.setItem('oScore', incoming.o);\n};\n\nexport const setGameboard = (client: any, incoming: any) => {\n  client.cache.writeQuery({\n    query: GAMEBOARD,\n    data: {\n      data: incoming,\n    },\n  });\n  localStorage.setItem('gameboard', JSON.stringify(incoming));\n};\n\nexport const setGameStatus = (client: any, incoming: any) => {\n  client.cache.writeQuery({\n    query: GAME_STATUS,\n    data: {\n      status: incoming,\n    },\n  });\n  localStorage.setItem('status', JSON.stringify(incoming));\n};\n\nexport const setTurn = (client: any, incoming: any) => {\n  client.cache.writeQuery({\n    query: TURN,\n    data: {\n      turn: incoming,\n    },\n  });\n  localStorage.setItem('turn', incoming);\n};\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { ReactComponent as TrophyIcon } from '../assets/zondicons/trophy.svg';\n\nimport { SCORES } from '../apolloMockServer';\n\nconst Nav: React.FC = () => {\n  const { data: scores } = useQuery(SCORES);\n\n  return (\n    <div className='flex bg-teal-200 w-full h-24 text-gray-800 shadow-lg'>\n      <div className='h-full flex flex-col justify-center items-end px-5'>\n        <h3 className='text-base sm:text-xl tracking-wide leading-5'>React-Tac-Toe</h3>\n        <span className='text-xs'>with TypeScript</span>\n      </div>\n      <div className='grid grid-cols-2 divide-x divide-gray-800 ml-auto items-center px-5'>\n        <PlayerScore label='X' score={scores.x} />\n        <PlayerScore label='O' score={scores.o} />\n      </div>\n    </div>\n  );\n};\n\nconst PlayerScore: React.FC<PSProps> = ({ label, score }) => {\n  return (\n    <div className={`flex flex-col ${label === 'X' ? 'items-end pr-5' : 'pl-5'}`}>\n      <span className='text-xs'>Player <span className='font-bold'>{label}</span></span>\n      <span className='text-3xl'>{score}</span>\n      <div className={`flex ${label === 'X' && 'flex-row-reverse'} h-3`}>\n        { /**  for # score, render trophy */}\n        {[...Array(Number(score))].map((e, i) => <TrophyIcon key={i} width={12} height={12} className='fill-current text-yellow-600' />)}\n      </div>\n    </div>\n  );\n};\n\ntype PSProps = {\n  label: string,\n  score: number,\n};\n\nexport default Nav;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.3 14.89l2.77 2.77a1 1 0 0 1 0 1.41 1 1 0 0 1-1.41 0l-2.59-2.58A5.99 5.99 0 0 1 11 18V9.04a1 1 0 0 0-2 0V18a5.98 5.98 0 0 1-3.07-1.51l-2.59 2.58a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.41l2.77-2.77A5.95 5.95 0 0 1 4.07 13H1a1 1 0 1 1 0-2h3V8.41L.93 5.34a1 1 0 0 1 0-1.41 1 1 0 0 1 1.41 0l2.1 2.1h11.12l2.1-2.1a1 1 0 0 1 1.41 0 1 1 0 0 1 0 1.41L16 8.41V11h3a1 1 0 1 1 0 2h-3.07c-.1.67-.32 1.31-.63 1.89zM15 5H5a5 5 0 1 1 10 0z\"\n});\n\nvar SvgBug = function SvgBug(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgBug, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/bug.761eacd1.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\nimport Confetti from 'react-confetti';\n\nimport { ReactComponent as TrophyIcon } from '../../assets/zondicons/trophy.svg';\nimport { ReactComponent as Bug } from '../../assets/zondicons/bug.svg';\n\nconst GameOverPopup: React.FC<GOPProps> = ({ message, resetGame }) => {\n  return (\n    <div className='absolute w-full h-full flex-1 bg-gray-800 bg-opacity-50 top-0 left-0 flex items-center justify-center cursor-pointer' onClick={resetGame}>\n      <div className='flex flex-col items-center justify-center bg-teal-200 w-11/12 sm:w-auto py-64 sm:p-64 rounded-lg shadow-lg cursor-default' onClick={e => e.stopPropagation()}>\n        {message === 'Player X and Player O have tied!' ? <Bug width={114} height={114} className='fill-current text-gray-800' /> : (\n          <>\n            <Confetti gravity={1.8} tweenDuration={5000} recycle={false} />\n            <TrophyIcon width={114} height={114} className='fill-current text-yellow-600' />\n          </>\n        )}\n        <span className='text-2xl text-gray-800 mt-5'>{message}</span>\n      </div>\n    </div>\n  );\n};\n\ntype GOPProps = {\n  message: string,\n  resetGame: () => void\n};\n\nexport default GameOverPopup;\n","import React from 'react'\nimport { useQuery } from '@apollo/client';\n\nimport { TURN } from '../../apolloMockServer';\n\nconst PlayerInfo: React.FC<PIProps> = ({ label }) => {\n  const { data: turn } = useQuery(TURN);\n\n  return (\n    <div className='flex flex-col items-center justify-center'>\n      <span className={`${turn.turn === label ? 'bg-pink-500' : 'bg-gray-800'} rounded-full w-20 h-20 flex items-center justify-center text-gray-100 text-3xl font-semibold`}>{label}</span>\n      <span className={`mt-5 font-semibold ${turn.turn === label ? 'text-pink-500' : 'text-gray-800'} h-5`}>Player {label}</span>\n      <span className='mt-5 font-semibold text-pink-500 h-5'>{turn.turn === label && 'Your turn!'}</span>\n    </div>\n  );\n};\n\ntype PIProps = {\n  label: string\n};\n\nexport default PlayerInfo\n","import React, { useEffect } from 'react'\nimport { useApolloClient, useLazyQuery } from '@apollo/client';\n\nimport { GAMEBOARD, TURN, setGameboard, setTurn } from '../../apolloMockServer';\n\nconst GameboardCell: React.FC<GCProps> = ({ i, j, value }) => {\n  const client = useApolloClient();\n\n  const [getGameboard, { data: gameboard }] = useLazyQuery(GAMEBOARD);\n  const [getTurn, { data: turn }] = useLazyQuery(TURN);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (isMounted) {\n      getGameboard();\n      getTurn();\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [getGameboard, getTurn])\n\n  const handleCellClick = () => {\n    // update board with X or O depending on turn\n    if (!value) {\n      const updatedGameboard: string[][] = [...gameboard.data];\n      const updatedRow: string[] = [...updatedGameboard[i]];\n      updatedRow[j] = turn.turn;\n      updatedGameboard[i] = updatedRow;\n      setGameboard(client, updatedGameboard);\n      setTurn(client, turn.turn === 'X' ? 'O' : 'X');\n    }\n  };\n\n  return (\n    <div className={`flex items-center justify-center text-6xl text-gray-100 ${value === '' ? 'cursor-pointer hover:bg-gray-700' : 'cursor-default'} ${getBorderStyles(i, j)}`}\n      onClick={handleCellClick}\n      onKeyDown={handleCellClick}\n      role='button'\n      tabIndex={0}\n    >\n      {value}\n    </div>\n  );\n};\n\ntype GCProps = {\n  i: number,\n  j: number,\n  value: string\n};\n\nconst getBorderStyles = (i: number, j: number) => {\n  let outputClasses = '';\n  if (i < 2) {\n    if (j < 2) {\n      outputClasses += 'border-b border-r border-teal-200';\n    } else {\n      outputClasses += 'border-b border-teal-200';\n    }\n  } else {\n    if (j < 2) {\n      outputClasses += 'border-r border-teal-200';\n    }\n  }\n\n  return outputClasses;\n};\n\nexport default GameboardCell;\n","import React, { useEffect } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\n\nimport { SCORES, GAMEBOARD, GAME_STATUS, setScores, setGameboard, setGameStatus } from '../apolloMockServer';\nimport { PlayerInfo, GameboardCell, GameOverPopup } from './components';\n\nconst Gameboard = () => {\n  const client = useApolloClient();\n\n  const { data: scores } = useQuery(SCORES);\n  const { data: gameboard } = useQuery(GAMEBOARD);\n  const { data: gameStatus } = useQuery(GAME_STATUS);\n\n  useEffect(() => {\n    // check for a game win\n    const status = getGameStatus(gameboard.data);\n    if (status.status !== 'IN_PROGRESS') {\n      setGameboard(client, [\n        ['', '', ''],\n        ['', '', ''],\n        ['', '', ''],\n      ]);\n      if (status.winner === 'X') {\n        // call apollo mock api to update scores state\n        setScores(client, { ...scores, x: Number(scores.x) + 1 });\n      } else if (status.winner === 'O') {\n        // call apollo mock api to update scores state\n        setScores(client, { ...scores, o: Number(scores.o) + 1 });\n      }\n      setGameStatus(client, status);\n    }\n  }, [scores, gameboard.data, client])\n\n  const resetGame = () => {\n    setGameStatus(client, {\n      status: 'IN_PROGRESS',\n      winner: ''\n    });\n  };\n\n  return (\n    <>\n      <div className='bg-teal-200 container mx-auto h-full rounded-lg shadow-lg flex flex-col-reverse sm:flex-row'>\n        <div className='my-12 sm:w-1/5 sm:m-5 grid grid-cols-2 sm:grid-rows-2 sm:grid-cols-1 divide-x sm:divide-y sm:divide-x-0 divide-gray-800'>\n          <PlayerInfo label='X' />\n          <PlayerInfo label='O' />\n        </div>\n        <div className='flex-1 mx-2 my-2 sm:m-5 sm:ml-0 p-3 bg-gray-800 rounded-lg shadow-lg grid grid-cols-3 grid-rows-3'>\n          {gameboard.data.map((row: string[], i: number) => {\n            return row.map((value, j) => {\n              return <GameboardCell key={value + i.toString() + j.toString()} i={i} j={j} value={value} />;\n            });\n          })}\n        </div>\n      </div>\n      {gameStatus.status.status === 'WON' && (\n        <GameOverPopup message={`Player ${gameStatus.status.winner} Wins!`} resetGame={resetGame} />\n      )}\n      {gameStatus.status.status === 'DRAW' && (\n        <GameOverPopup message='Player X and Player O have tied!' resetGame={resetGame} />\n      )}\n    </>\n  );\n};\n\nexport type GameStatus = {\n  status: string,\n  winner: string\n}\n\nconst getGameStatus = (gameboard: string[][]) => {\n  let isBoardFull = true;\n\n  // check rows for win\n  for (let i = 0; i < gameboard.length; i++) {\n    let rowPoints = 0;\n    for (let j = 0; j < gameboard.length; j++) {\n      rowPoints += Number(valueToPointMap.get(gameboard[i][j])) || 0;\n      // update isBoardFull\n      if (gameboard[j][i] === '') isBoardFull = false;\n    }\n    if (rowPoints === 3) {\n      return xWinStatus;\n    } else if (rowPoints === -3) {\n      return oWinStatus;\n    }\n  }\n\n  // check cols for win\n  for (let i = 0; i < gameboard.length; i++) {\n    let rowPoints = 0;\n    for (let j = 0; j < gameboard.length; j++) {\n      rowPoints += Number(valueToPointMap.get(gameboard[j][i])) || 0;\n    }\n    if (rowPoints === 3) {\n      return xWinStatus;\n    } else if (rowPoints === -3) {\n      return oWinStatus;\n    }\n  }\n\n  // check for diagonals\n  const diagTlBrPoints = (valueToPointMap.get(gameboard[0][0]) || 0) + (valueToPointMap.get(gameboard[1][1]) || 0) + (valueToPointMap.get(gameboard[2][2]) || 0);\n  if (diagTlBrPoints === 3) {\n    return xWinStatus;\n  } else if (diagTlBrPoints === -3) {\n    return oWinStatus;\n  }\n\n  const diagTrBlPoints = (valueToPointMap.get(gameboard[0][2]) || 0) + (valueToPointMap.get(gameboard[1][1]) || 0) + (valueToPointMap.get(gameboard[2][0]) || 0);\n  if (diagTrBlPoints === 3) {\n    return xWinStatus;\n  } else if (diagTrBlPoints === -3) {\n    return oWinStatus;\n  }\n\n  // if board is not full, return in progress\n  if (!isBoardFull) {\n    return inProgressStatus;\n  }\n\n  // otherwise, return draw\n  return drawStatus;\n};\n\nconst valueToPointMap = new Map([['X', 1], ['O', -1]]);\n\nconst xWinStatus: GameStatus = {\n  status: 'WON',\n  winner: 'X'\n};\n\nconst oWinStatus: GameStatus = {\n  status: 'WON',\n  winner: 'O'\n};\n\nconst drawStatus: GameStatus = {\n  status: 'DRAW',\n  winner: ''\n};\n\nconst inProgressStatus: GameStatus = {\n  status: 'IN_PROGRESS',\n  winner: ''\n};\n\nexport default Gameboard;\n","import React from 'react';\nimport { RecoilRoot } from 'recoil'\n\nimport Nav from './nav/Nav';\nimport Gameboard from './gameboard/Gameboard';\nimport './tailwind.output.css';\n\nconst App: React.FC = () => {\n  return (\n    <RecoilRoot>\n      <div className='bg-gray-800 font-mono h-screen flex flex-col'>\n        <Nav />\n        <div className='p-2 sm:p-10 flex-1'>\n          <Gameboard />\n        </div>\n      </div>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { initializeState } from './apolloMockServer';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache({})\n});\n\ninitializeState(client.cache);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}